#include<iostream>
#include<vector>

using namespace std;

vector<int> f;

//Iteratively using memoization
int iStepFibbonacci(int n){
    f.push_back(0);
    if(n>=2){
        f.push_back(1);
    }
    int cnt = 2;
    for(int i = 2; i < n; i++){
        cnt++;
        f.push_back(f[i - 1] + f[i - 2]);
    }
    return n;
}

int rSteps = 0;

//Recursively
int rStepFibbonacci(int n){
    rSteps++;
    if(n==1){
        return 1;
    }
    if(n<=0) return 0;
    return rStepFibbonacci(n - 1) + rStepFibbonacci(n - 2);
}

int main(){
    int n,choice;
    cout<<"Enter number";
    cin >> n;
    
    while(choice!=3){
        cout<<"1. Iterative Fibonacci\n2. Recursive Fibonacci\n3. Quit\nEnter your choice: ";
        cin>>choice;
        switch(choice){
            case 1:
            cout << "Steps required using Iteration : " << iStepFibbonacci(n) << '\n';
            cout<<"fibbonacci values: ";
            for(int i=0;i<f.size();i++){
                cout<<f[i]<<" ";
            }
            cout<<"ans: "<<f[n-1]<<endl;
            cout<<"\n";
            break;
            
            case 2:
            rStepFibbonacci(n);
            cout << "Steps required using recursion : " << rSteps << '\n';
            cout<<"rStepFibbonacci"<<rStepFibbonacci(n-1)<<endl;
            cout<<"fibbonacci values: ";
            for(int i=0;i<n;i++){
                cout<<rStepFibbonacci(i)<<" ";
            }
            
            cout<<"\n";
            
            break;
            
            case 3:
            cout<<"Thankyou";
            break;
        }
    }
    return 0;
}
