

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int knapsacktab(vector<int>& wt, vector<int>& val, int n, int W) {
    // Create a 2D DP table with dimensions n x W+1 and initialize it with zeros
    vector<vector<int>> dp(n, vector<int>(W + 1, 0));

    // Base condition: Fill in the first row for the weight of the first item
    // for (int i = wt[0]; i <= W; i++) {
    //     dp[0][i] = val[0];
    // }

    // Fill in the DP table using a bottom-up approach
    for (int ind = 1; ind < n; ind++) {
        for (int cap = 0; cap <= W; cap++) {
            // Calculate the maximum value by either excluding the current item or including it
            int notTaken = dp[ind - 1][cap];
            int taken = INT_MIN;

            // Check if the current item can be included without exceeding the knapsack's capacity
            if (wt[ind] <= cap) {
                taken = val[ind] + dp[ind - 1][cap - wt[ind]];
            }

            // Update the DP table
            dp[ind][cap] = max(notTaken, taken);
        }
    }

    // The final result is in the last cell of the DP table
    return dp[n - 1][W];
}



int knapsack(vector<int> &wt,vector<int> &val, int ind,int W, vector<vector<int>> &dp){
    if(ind==0 || W==0){
        return 0;
    }
    if(dp[ind][W]!=-1)
    {
        return dp[ind][W];
    }
    int nottake=knapsack(wt,val,ind-1,W,dp);
    int take=INT_MIN;
    if(wt[ind] <= W){
        take=val[ind]+knapsack(wt,val,ind-1,W-wt[ind],dp);
    }
    
    return dp[ind][W] = max(take,nottake);
}

int main(){
    int n;
    cin>>n;
    vector<int> wt(n),val(n);
    for(int i=0;i<n;i++){
        cin>>wt[i];
    }
    for(int i=0;i<n;i++){
        cin>>val[i];
    }
    int W;
    cout<<"Enter capacity";
    cin>>W;
    vector<vector<int>> dp(n,vector<int> (W+1,-1));
    cout<<"Ans: "<<knapsack(wt,val,n-1,W,dp)<<endl;
    cout<<"ANS TAb: "<<knapsacktab(wt,val,n,W)<<endl;
    
    return 0;
}


