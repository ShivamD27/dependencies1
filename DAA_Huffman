#include<bits/stdc++.h>
using namespace std;

struct Node{
    char data;
    unsigned freq;
    Node *left, *right;
    Node(char data,int freq){
        this->data=data;
        this->freq=freq;
        this->left=NULL;
        this->right=NULL;
    }
};

// compare function
struct Compare{
    bool operator()(Node* left, Node* right){
        return left->freq > right->freq;
    }
};

Node* huffman(const string &s){
    map<char,int> mpp;
    // calculate frequency
    for(char ch:s){
        mpp[ch]++;
    }
    priority_queue<Node*,vector<Node*> , Compare> pq;
    // creating a leaf node for each character 
    for(auto &it:mpp){
        pq.push(new Node(it.first,it.second));
    }
    while(pq.size()>1){
        Node* left=pq.top();
        pq.pop();
        Node* right=pq.top();
        pq.pop();
        Node* internalNode = new Node('&',left->freq+right->freq);
        internalNode->left=left;
        internalNode->right=right;
        pq.push(internalNode);
    }
    return pq.top();
}

void printcodes(Node* root,string code,map<char,string> &ans){
    if(root==NULL){
        return;
    }
    if(root->data !='&'){
        ans[root->data]=code;
    }
    printcodes(root->left,code+"0",ans);
    printcodes(root->right,code+"1",ans);
}

string encode(string &s,map<char,string> &ans){
    string encodedString="";
    for(char ch: s){
        encodedString+=ans[ch];
    }
    return encodedString;
}
int main(){
    string s;
    cin>>s;
    Node *root= huffman(s);
    map<char,string> ans;
    printcodes(root,"",ans);
    for(auto it:ans){
        cout<<it.first<<" "<<it.second<<endl;
    }
    string encodedString=encode(s,ans);
    cout<<encodedString<<endl;

    return 0;
}
